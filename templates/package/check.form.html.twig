{#
 # -------------------------------------------------------------------------
 # Deploy plugin for GLPI
 # -------------------------------------------------------------------------
 #
 # LICENSE
 #
 # This file is part of Deploy.
 #
 # Deploy is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 3 of the License, or
 # (at your option) any later version.
 #
 # Deploy is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with Deploy. If not, see <http://www.gnu.org/licenses/>.
 # -------------------------------------------------------------------------
 # @copyright Copyright (C) 2022-2024 by Deploy plugin team.
 # @license   GPLv3 https://www.gnu.org/licenses/gpl-3.0.html
 # @link      https://github.com/pluginsGLPI/deploy
 # -------------------------------------------------------------------------
 #}

{% import 'components/form/fields_macros.html.twig' as fields %}

{% set types = call("GlpiPlugin\\Deploy\\Package_Check::getTypes") %}
{% set types_with_value = call("GlpiPlugin\\Deploy\\Package_Check::getTypesWithValueField") %}

<div class="modal-body">
    {{ fields.textField(
        'name',
        subitem_instance.fields['name'],
        __("Label", 'deploy') ~ '<i class="ms-2 ti ti-tag"></i>',
        field_options|merge({
            mb: 'mb-4',
        })
    ) }}

    {% set parent_type_field %}
        <div class="form-selectgroup">
            {% for type_group_key, type_group in types %}
                <label class="form-selectgroup-item">
                    <input type="radio" name="parent_type" value="{{ type_group_key }}" class="form-selectgroup-input"
                        {{ subitem_instance.fields['parent_type'] == type_group_key ? "checked" : "" }}>
                    <span class="form-selectgroup-label d-flex align-items-center">
                        {{ type_group['label'] }}
                        <i class="fa-fw fa-lg ms-3 {{ type_group['icon'] }}"></i>
                    </span>
                </label>
            {% endfor %}
        </div>
    {% endset %}
    {{ fields.field(
        'file',
        parent_type_field,
        __('Check type', 'deploy') ~ '<i class="ms-2 ti ti-check"></i>',
        field_options
    ) }}

    {% for type_group_key, type_group in types %}
    <div id="subtype-{{ type_group_key }}" class="subtype {{ is_edit and subitem_instance.fields['parent_type'] == type_group_key ? "" : "d-none" }}">
        {% set subtype_select_field %}
            <select class="form-select checktype">
                <option value="">--</option>
                {% for type_key, type in type_group['subtypes'] %}
                    <option value="{{ type_key }}" {{ subitem_instance.fields['type'] == type_key ? "selected" : "" }}>
                        {{ type }}
                    </option>
                {% endfor %}
            </select>
        {% endset %}
        {{ fields.field(
            'type',
            subtype_select_field,
            '',
            field_options
        ) }}
    </div>
    {% endfor %}
    <input type="hidden" name="type" id="checktype_value" value="{{ subitem_instance.fields['type'] }}">

    <div class="subfields mt-1 {{ is_edit ? "" : "d-none" }}">
        {% set extra_help %}
            <small id="extra-help" class="form-hint fst-italic"></small>
        {% endset %}

        {{ fields.textField(
            'path',
            subitem_instance.fields['path'],
            __("Path", 'deploy') ~ '<i class="ms-2 ti ti-folder"></i>',
            field_options|merge({
                'add_field_html': extra_help
            })
        ) }}

        <div class="valuefield mt-3 {{ subitem_instance.fields['type'] in types_with_value|keys ? "" : "d-none" }}">
            {% set extra_help %}
                <small id="value-extra-help" class="form-hint fst-italic"></small>
            {% endset %}
            {{ fields.textField(
                'value',
                subitem_instance.fields['value'],
                types_with_value[subitem_instance.fields['type']] ?? (__("Value", 'deploy') ~ '<i class="ms-2 ti ti-forms"></i>'),
                field_options|merge({
                    'add_field_html': extra_help
                })
            ) }}
        </div>
    </div>
</div>

<div id="return-block" class="{{ is_edit ? "" : "d-none" }} modal-body bg-warning-lt">
    {{ fields.dropdownArrayField(
        'return',
        subitem_instance.fields['return'],
        call("GlpiPlugin\\Deploy\\Package_Check::getReturnValues"),
        __("If not succesfull", 'deploy') ~ '<i class="ms-2 ti ti-alert-triangle"></i>',
        field_options
    ) }}
</div>


<script type="text/javascript">
$(document).ready(function() {
    $('[name="parent_type"]').on('change', function() {
        $('.subtype, .subfields, #return-bloc, .modal-footer').addClass('d-none');


        var parent_type = $(this).val();
        if (parent_type.length > 0) {
            $('#return-block').removeClass('d-none');
            $('#subtype-' + $(this).val()).removeClass('d-none');
        }
    });

    $('.checktype').on('change', function() {
        var parentype = $('[name="parent_type"]:checked').val();
        var checktype = $(this).val();

        $('.valuefield').addClass('d-none')
            .find('label').html(__("Value", 'deploy') + '<i class="ms-2 ti ti-forms"></i>');
        $('.subfields, .modal-footer').removeClass('d-none');

        $('#checktype_value').val(checktype);
        $('#extra-help').html('');
        switch (parentype) {
            case 'registry':
                $('#extra-help').html(__("Path to the registry key (ex: \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Glpi-Agent\\\")", 'deploy'));
                break;

            case 'file':
                $('#extra-help').html(__("Path to the file (ex: \"/etc/passwd\")", 'deploy'));
                break;

            case 'directory':
                $('#extra-help').html(__("Path to the directory (ex: \"/tmp\")", 'deploy'));
                break;
        }

        var types_with_value = {{ types_with_value|json_encode|raw }};
        if (Object.keys(types_with_value).includes(checktype)) {
            $('.valuefield').removeClass('d-none')
                .find('label').html(types_with_value[checktype]);
        }
    });
});
</script>
