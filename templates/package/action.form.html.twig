{#
 # -------------------------------------------------------------------------
 # Deploy plugin for GLPI
 # -------------------------------------------------------------------------
 #
 # LICENSE
 #
 # This file is part of Deploy.
 #
 # Deploy is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 3 of the License, or
 # (at your option) any later version.
 #
 # Deploy is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with Deploy. If not, see <http://www.gnu.org/licenses/>.
 # -------------------------------------------------------------------------
 # @copyright Copyright (C) 2022-2024 by Deploy plugin team.
 # @license   GPLv3 https://www.gnu.org/licenses/gpl-3.0.html
 # @link      https://github.com/pluginsGLPI/deploy
 # -------------------------------------------------------------------------
 #}

{% import 'components/form/fields_macros.html.twig' as fields %}

<div class="modal-body">
    {{ fields.textField(
        'name',
        subitem_instance.fields['name'],
        __("Label", 'deploy') ~ '<i class="ms-2 ti ti-tag"></i>',
        field_options|merge({
            mb: 'mb-4',
        })
    ) }}

    {% set type_select_field %}
        <select class="form-select" id="actiontype" name="type">
            <option value="">--</option>
            {% for type_key, type in call("GlpiPlugin\\Deploy\\Package_Action::getTypes") %}
                <option value="{{ type_key }}" {{ subitem_instance.fields['type'] == type_key ? "selected" : "" }}>
                    {{ type }}
                </option>
            {% endfor %}
        </select>
    {% endset %}
    {{ fields.field(
        'type',
        type_select_field,
        __("Action", 'deploy') ~ '<i class="ms-2 ' ~ call("GlpiPlugin\\Deploy\\Package_Action::getIcon") ~ '"></i>',
        field_options
    ) }}

    {% set show_exec = is_edit and subitem_instance.fields['type'] == constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_CMD") %}
    <div id="execfields" class="specificfields {{ show_exec ? "" : "d-none" }}">
        {{ fields.textareaField(
            'exec',
            subitem_instance.fields['exec'],
            __("Command", 'deploy') ~ '<i class="ms-2 ti ti-terminal"></i>',
            field_options
        ) }}
    </div>

    {% set show_double = is_edit and (
            subitem_instance.fields['type'] == constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_MOVE")
         or subitem_instance.fields['type'] == constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_COPY")
    ) %}
    <div id="doublepathfields" class="specificfields {{ show_double ? "" : "d-none" }}">
        {% set subfields_options = {
            'label_class': 'col-xxl-3',
            'input_class': 'col-xxl-9',
        } %}
        {% set from_to_fields %}
            {{ fields.textField(
                'from',
                subitem_instance.fields['from'],
                __("From", 'deploy'),
                subfields_options
            ) }}

            {{ fields.textField(
                'to',
                subitem_instance.fields['to'],
                __("To", 'deploy'),
                subfields_options
            ) }}
        {% endset %}

        {% set icon_cls = call("GlpiPlugin\\Deploy\\Package_Action::getTypeIconClass", [subitem_instance.fields['type']]) %}
        {{ fields.field(
            '',
            from_to_fields,
            __("Paths", 'deploy') ~ '<i class="ms-2 action-icon-type ' ~ icon_cls ~ '"></i>',
            field_options|merge({
                input_class: 'col-xxl-9 d-flex'
            })
        ) }}
    </div>

    {% set show_single = is_edit and (
            subitem_instance.fields['type'] == constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_DELETE")
         or subitem_instance.fields['type'] == constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_MKDIR")
    ) %}
    <div id="singlepathfields" class="specificfields {{ show_single ? "" : "d-none" }}">
        {% set extra_help %}
            <small class="form-hint fst-italic">
                {{ __("You can write a different path per line", 'deploy') }}
            </small>
        {% endset %}
        {% set icon_cls = call("GlpiPlugin\\Deploy\\Package_Action::getTypeIconClass", [subitem_instance.fields['type']]) %}
        {{ fields.textareaField(
            'list',
            subitem_instance.fields['list']|join("\n"),
            __("Path", 'deploy') ~ '<i class="ms-2 action-icon-type ' ~ icon_cls ~ '"></i>',
            field_options|merge({
                'add_field_html': extra_help,
            })
        ) }}
    </div>
</div>

<script type="text/javascript">
$(document).ready(function() {
    $('#actiontype').on('change', function() {
        $('.specificfields, .modal-footer').addClass('d-none');
        var actiontype = $(this).val();

        if (actiontype != "") {
            $('.modal-footer').removeClass('d-none');
        }

        $('.action-icon-type')
            .attr('class', '')
            .addClass('ms-2 action-icon-type');

        switch (actiontype) {
            case '{{ constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_CMD") }}':
                $('#execfields').removeClass('d-none');
                $('.action-icon-type').addClass('{{ call("GlpiPlugin\\Deploy\\Package_Action::getTypeIconClass", [constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_CMD")]) }}');
                break;
            case '{{ constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_MOVE") }}':
                $('#doublepathfields').removeClass('d-none');
                $('.action-icon-type').addClass('{{ call("GlpiPlugin\\Deploy\\Package_Action::getTypeIconClass", [constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_MOVE")]) }}');
                break;
            case '{{ constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_COPY") }}':
                $('#doublepathfields').removeClass('d-none');
                $('.action-icon-type').addClass('{{ call("GlpiPlugin\\Deploy\\Package_Action::getTypeIconClass", [constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_COPY")]) }}');
                break;
            case '{{ constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_DELETE") }}':
                $('#singlepathfields').removeClass('d-none');
                $('.action-icon-type').addClass('{{ call("GlpiPlugin\\Deploy\\Package_Action::getTypeIconClass", [constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_DELETE")]) }}');
                break;
            case '{{ constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_MKDIR") }}':
                $('#singlepathfields').removeClass('d-none');
                $('.action-icon-type').addClass('{{ call("GlpiPlugin\\Deploy\\Package_Action::getTypeIconClass", [constant("GlpiPlugin\\Deploy\\Package_Action::ACTION_MKDIR")]) }}');
                break;
        }
    });
});
</script>
